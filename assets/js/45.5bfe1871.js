(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{447:function(t,s,a){"use strict";a.r(s);var n=a(45),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"node-js-基础"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-js-基础"}},[t._v("#")]),t._v(" node.js 基础")]),t._v(" "),a("h2",{attrs:{id:"_1-1-buffer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-buffer"}},[t._v("#")]),t._v(" 1.1 Buffer")]),t._v(" "),a("h3",{attrs:{id:"背景知识"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#背景知识"}},[t._v("#")]),t._v(" 背景知识")]),t._v(" "),a("ol",[a("li",[t._v("ArrayBuffer 可以理解为一块内存")])]),t._v(" "),a("p",[t._v("通用的、固定长度的原始二进制的数据缓冲区")]),t._v(" "),a("p",[t._v("1.1 ArrayBuffer 能够直接操作吗？")]),t._v(" "),a("p",[t._v("答： 不能直接操作。使用： 通过类型数组对象来操作（TypedArray）. 将缓冲区中的数据表示为特定的格式")]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("Unit8Array\n表示一个 8 位无符号整型数组，创建的时候内容被初始化为 0")])]),t._v(" "),a("p",[t._v("字节 byte = 8bit\njs Number 64 位 => 8byte")]),t._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[t._v("ArrayBuffer 和 TypeArray 的关系是什么？")])]),t._v(" "),a("p",[t._v("TypeArray: Unit8Array, Int32Array, Int16Array")]),t._v(" "),a("p",[t._v("ArrayBuffer: 本身是一个 0 和 1 存放在一行里的一个集合。")]),t._v(" "),a("p",[t._v("3.1 可以用一个 Int8 的确定类型数组来分离存放 8 位的二进制字节\n3.2 无符号的 Int16 存放 16 位的二进制字节")]),t._v(" "),a("ol",{attrs:{start:"4"}},[a("li",[t._v("总结\nArrayBuffer 扮演一个原生的内存角色")])]),t._v(" "),a("h2",{attrs:{id:"nodejs-buffer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nodejs-buffer"}},[t._v("#")]),t._v(" NodeJS Buffer")]),t._v(" "),a("p",[a("a",{attrs:{href:"http://nodejs.cn/api/buffer.html#buffer_static_method_buffer_alloc_size_fill_encoding",target:"_blank",rel:"noopener noreferrer"}},[t._v("Buffer-nodejs"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("在 node 中用 Buffer 的实例实现了 Unit8Array 的 api\nBuffer 的实例类似于整型数组，区别在于 Buffer 的大小是固定的，在创建的时候就确定了")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建一个长度为10 填充为0的Buffer")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" buf1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Buffer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alloc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 此处的 Buffer 为全局对象，可以直接调用")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buf1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建一个长度为10 填充为1的Buffer")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" buf2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Buffer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alloc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buf2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// allocUnsafe 比 alloc 更快，但是 allocUnsafe 创建的缓存区里可能存在旧数据")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" buf3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Buffer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("allocUnsafe")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// fill write重写")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buf3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"tips"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tips"}},[t._v("#")]),t._v(" Tips")]),t._v(" "),a("ol",[a("li",[t._v("当调用 Buffer.allocUnsafe() 时，被分配的内存段是未初始化的\n内存的分配非常快，但是分配的内存段可能包含潜在的旧数据\n具有明显的性能优势，但是如果使用不当，会给程序引入安全漏洞")])]),t._v(" "),a("h2",{attrs:{id:"_1-2-stream"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-stream"}},[t._v("#")]),t._v(" 1.2 Stream")]),t._v(" "),a("h2",{attrs:{id:"_1-3-events"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-events"}},[t._v("#")]),t._v(" 1.3 Events")]),t._v(" "),a("h2",{attrs:{id:"_2-全局对象解析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-全局对象解析"}},[t._v("#")]),t._v(" 2. 全局对象解析")]),t._v(" "),a("h2",{attrs:{id:"_3-node-js-事件循环模型-重点学习"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-node-js-事件循环模型-重点学习"}},[t._v("#")]),t._v(" 3. node.js 事件循环模型(重点学习)")]),t._v(" "),a("p",[t._v("面试考察： 浏览器的事件循环是怎样的？ => 你了解 node 的事件循环吗？ 两者有什么区别？")])])}),[],!1,null,null,null);s.default=r.exports}}]);